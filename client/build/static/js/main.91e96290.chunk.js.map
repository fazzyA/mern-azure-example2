{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","createThought","thought","prompt","axios","post","then","res","setState","thoughts","state","data","newThought","catch","err","alert","JSON","stringify","deleteThoughts","window","confirm","delete","seedThoughts","get","this","className","onClick","map","thoughtModel","style","listStyleType","margin","borderBottom","_id","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA4EeA,E,kDAvEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,cAAgB,WACd,IAAMC,EAAUC,OAAO,wBAClBD,GACLE,IACGC,KAAK,uBAAwB,CAAEH,YAC/BI,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAS,GAAD,mBAAM,EAAKC,MAAMD,UAAjB,CAA2BF,EAAII,KAAKC,kBACxEC,OAAM,SAAAC,GAAG,OAAIC,MAAM,6BAAD,OAA8BC,KAAKC,UAAUH,SA5CjD,EA+CnBI,eAAiB,WACEC,OAAOC,QAAQ,yBAEhChB,IACGiB,OAAO,kBACPf,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAU,QACtCI,OAAM,SAAAC,GAAG,OAAIC,MAAM,kCAAD,OAAmCC,KAAKC,UAAUH,SArDtD,EAwDnBQ,aAAe,WACEH,OAAOC,QAAQ,qCAE9BhB,IACGC,KAAK,qBAAsB,IAC3BC,MAAK,WACJF,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,UAEVF,MAAME,QAjET,EAAKL,MAAQ,CACXD,SAAU,IAHK,E,qDAOnB,WAAqB,IAAD,OAClBL,IACGmB,IAAI,kBACJjB,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEC,SAAUF,EAAII,UAC1CE,MAAME,S,oBAGX,WAAU,IACAN,EAAae,KAAKd,MAAlBD,SAER,OACE,sBAAKgB,UAAU,MAAf,UAEE,wBAAQC,QAASF,KAAKvB,cAAtB,4BACA,wBAAQyB,QAASF,KAAKN,eAAtB,6BACA,wBAAQQ,QAASF,KAAKF,aAAtB,2BAEA,6BACGb,EAASkB,KAAI,SAAAC,GAAY,OACxB,oBACEC,MAAO,CAAEC,cAAe,OAAQC,OAAQ,OAAQC,aAAc,mBADhE,SAIGJ,EAAa1B,SAFT0B,EAAaK,iB,GA7BdC,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91e96290.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      thoughts: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get('/api/thoughts/')\r\n      .then(res => this.setState({ thoughts: res.data }))\r\n      .catch(alert);\r\n  }\r\n\r\n  render() {\r\n    const { thoughts } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {/* Buttons to interact with API */}\r\n        <button onClick={this.createThought}>Create Thought</button>\r\n        <button onClick={this.deleteThoughts}>Delete Thoughts</button>\r\n        <button onClick={this.seedThoughts}>Seed Thoughts</button>\r\n        {/* List of thoughts in Cosmos DB */}\r\n        <ul>\r\n          {thoughts.map(thoughtModel => (\r\n            <li\r\n              style={{ listStyleType: 'none', margin: '20px', borderBottom: '1px solid black' }}\r\n              key={thoughtModel._id}\r\n            >\r\n              {thoughtModel.thought}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  createThought = () => {\r\n    const thought = prompt('Enter your thought: ');\r\n    if (!thought) return;\r\n    axios\r\n      .post('/api/thoughts/create', { thought })\r\n      .then(res => this.setState({ thoughts: [...this.state.thoughts, res.data.newThought] }))\r\n      .catch(err => alert(`Failed to create thought\\n${JSON.stringify(err)}`));\r\n  };\r\n\r\n  deleteThoughts = () => {\r\n    const doDelete = window.confirm('Delete all Thoughts?');\r\n    if (!doDelete) return;\r\n    axios\r\n      .delete('/api/thoughts/')\r\n      .then(res => this.setState({ thoughts: [] }))\r\n      .catch(err => alert(`Failed to delete all thoughts\\n${JSON.stringify(err)}`));\r\n  };\r\n\r\n  seedThoughts = () => {\r\n    const doSeed = window.confirm('Do you want to seed random data?');\r\n    if (!doSeed) return;\r\n    axios\r\n      .post('/api/thoughts/seed', {})\r\n      .then(() => {\r\n        axios\r\n          .get('/api/thoughts/')\r\n          .then(res => this.setState({ thoughts: res.data }))\r\n          .catch(alert);\r\n      })\r\n      .catch(alert);\r\n  };\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}